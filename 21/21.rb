require 'set'
require 'benchmark'
file = "input.txt"

sum1 = 0
sum2 = 0

codes = []

$cache = Hash.new
paths = {"^"=>{"A"=>[">"], "<"=>["v<"], "v"=>["v"], ">"=>["v>"]}, "<"=>{"^"=>[">^"], "A"=>[">>^"], "v"=>[">"], ">"=>[">>"]}, "v"=>{"^"=>["^"], "A"=>["^>"], "<"=>["<"], ">"=>[">"]}, ">"=>{"^"=>["<^"], "A"=>["^"], "<"=>["<<"], "v"=>["<"]}, "7"=>{"8"=>[">"], "9"=>[">>"], "4"=>["v"], "5"=>["v>"], "6"=>["v>>"], "1"=>["vv"], "2"=>["vv>"], "3"=>["vv>>"], "0"=>[">vvv"], "A"=>[">>vvv"]}, "8"=>{"7"=>["<"], "9"=>[">"], "4"=>["<v"], "5"=>["v"], "6"=>["v>"], "1"=>["<vv"], "2"=>["vv"], "3"=>["vv>"], "0"=>["vvv"], "A"=>["vvv>"]}, "9"=>{"7"=>["<<"], "8"=>["<"], "4"=>["<<v"], "5"=>["<v"], "6"=>["v"], "1"=>["<<vv"], "2"=>["<vv"], "3"=>["vv"], "0"=>["<vvv"], "A"=>["vvv"]}, "4"=>{"7"=>["^"], "8"=>["^>"], "9"=>["^>>"], "5"=>[">"], "6"=>[">>"], "1"=>["v"], "2"=>["v>"], "3"=>["v>>"], "0"=>[">vv"], "A"=>[">>vv"]}, "5"=>{"7"=>["<^"], "8"=>["^"], "9"=>["^>"], "4"=>["<"], "6"=>[">"], "1"=>["<v"], "2"=>["v"], "3"=>["v>"], "0"=>["vv"], "A"=>["vv>"]}, "6"=>{"7"=>["<<^"], "8"=>["<^"], "9"=>["^"], "4"=>["<<"], "5"=>["<"], "1"=>["<<v"], "2"=>["<v"], "3"=>["v"], "0"=>["<vv"], "A"=>["vv"]}, "1"=>{"7"=>["^^"], "8"=>["^^>"], "9"=>["^^>>"], "4"=>["^"], "5"=>["^>"], "6"=>["^>>"], "2"=>[">"], "3"=>[">>"], "0"=>[">v"], "A"=>[">>v"]}, "2"=>{"7"=>["<^^"], "8"=>["^^"], "9"=>["^^>"], "4"=>["<^"], "5"=>["^"], "6"=>["^>"], "1"=>["<"], "3"=>[">"], "0"=>["v"], "A"=>["v>"]}, "3"=>{"7"=>["<<^^"], "8"=>["<^^"], "9"=>["^^"], "4"=>["<<^"], "5"=>["<^"], "6"=>["^"], "1"=>["<<"], "2"=>["<"], "0"=>["<v"], "A"=>["v"]}, "0"=>{"7"=>["^^^<"], "8"=>["^^^"], "9"=>["^^^>"], "4"=>["^<^"], "5"=>["^^"], "6"=>["^^>"], "1"=>["^<"], "2"=>["^"], "3"=>["^>"], "A"=>[">"]}, "A"=>{"^"=>["<"], "<"=>["v<<"], "v"=>["<v"], ">"=>["v"], "7"=>["^^^<<"], "8"=>["<^^^"], "9"=>["^^^"], "4"=>["^^<<"], "5"=>["<^^"], "6"=>["^^"], "1"=>["^<<"], "2"=>["<^"], "3"=>["^"], "0"=>["<"]}}

File.open(file).each_with_index do |r,y|
    r = r.strip.split(//)
    codes << r
end

def navigate_on_keypad(code, paths)
    output = []
    last_key = "A"
    code.each do |c|
        if last_key != c
            output << paths[last_key][c][0]
        end
        output << "A"
        last_key = c
    end
    output
end

def solve(code, paths, level=1)
    if level == 0
        return code.length
    end

    if $cache.key?(code+","+level.to_s)
        return $cache[code+","+level.to_s]
    end

    sum = 0
    code.scan(/[^A]+A|A/).each_with_index do |chunk,i|
        sum += solve(navigate_on_keypad(chunk.split(//),paths).join(""), paths, level-1)
    end
    $cache[code+","+level.to_s] = sum
    return sum
    # do some cleverly cached recursive stuff
end

codes.each_with_index do |c,i|
    nr = c[0..-2].join("").to_i
    sum1 += nr*solve(c.join(""), paths,3)
    sum2 += nr*solve(c.join(""), paths,26)
end

puts sum1
puts sum2